dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9])[1]
for (i in qbs[[1]]) {
for (j in dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9])[1]) {
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]][j] <- qbr2017[qbr2017$short_name == i & qbr2017$week_text == "Week 1", 11][[1]][1]
}
}
plays2017$qbr
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]][2]
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]][2] <- 12
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]][2]
qbr2017[qbr2017$short_name == i & qbr2017$week_text == "Week 1", 11][[1]][1]
j
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]]
for (i in qbs[[1]]) {
for (j in 1:dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9])[1]) {
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]][j] <- qbr2017[qbr2017$short_name == i & qbr2017$week_text == "Week 1", 11][[1]][1]
}
}
plays2017$qbr
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Wentz", 9][[1]][2]
qbr2017[qbr2017$short_name == "C. Wentz" & qbr2017$week_text == "Week 1", 11][[1]][1]
plays2017$qbr
plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == "T. Brady", 9]
plays2017
write.csv(plays2017, "Testplays2017.csv")
pbpPlays2017
plays2017 <- plays2017 %>%
select(gameId, playId, week, playDescription,
defendersInTheBox, numberOfPassRushers,
personnel.defense, play_type,
passer_player_name) %>%
# Eliminate special teams plaeys - keep only runs and passes
filter(play_type %in% c("run", "pass"))
# Join the datasets together
plays2017 <- inner_join(databowlPlays2017, pbpPlays2017,
by = c("gameId", "playId"))
plays2017 <- plays2017 %>%
select(gameId, playId, week, playDescription,
defendersInTheBox, numberOfPassRushers,
personnel.defense, play_type,
passer_player_name) %>%
# Eliminate special teams plaeys - keep only runs and passes
filter(play_type %in% c("run", "pass"))
# Get only 2017 season
qbr2017 <- qbr2017 %>%
filter(season == 2017)
str_c("Week ", 1)
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9])[1]
plays2017
# Create a qbr column initiated with all zeros
plays2017$qbr <- rep(0, dim(plays2017)[1])
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10])[1]
plays2017$week
plays2017$week == 1
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", 10])[1]
dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", 10])[1]
dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", 10])
dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", ])
plays2017
# Add a space to the QB name in the plays2017 dataset
for (i in 1:dim(plays2017)[1]) {
if (!is.na(plays2017$passer_player_name[i])) {
plays2017$passer_player_name[i] <- str_replace(plays2017$passer_player_name[i], "\\.", ". ")
}
}
dim(plays2017[plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", ])
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", ])
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == "A. Dalton", ])
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Wentz", ])
dim(plays2017[plays2017$week == 1 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Wentz", 10])[1]
# Add Week 1 QBR to dataset
for (i in qbs[[1]]) {
for (j in 1:17) {
for (k in 1:dim(plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10])[1]) {
plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 9][[1]][k] <- qbr2017[qbr2017$short_name == i & qbr2017$week_text == str_c("Week ", j), 11][[1]][1]
}
}
}
# Add Week 1 QBR to dataset
for (i in qbs[[1]]) {
for (j in 1:17) {
for (k in 1:dim(plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10])[1]) {
plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10][[1]][k] <- qbr2017[qbr2017$short_name == i & qbr2017$week_text == str_c("Week ", j), 11][[1]][1]
}
}
}
plays2017$qbr
plays2017[plays2017$week == 17 & plays2017$play_type == "pass" & plays2017$passer_player_name == "T. Brady", 10][[1]][2]
plays2017[plays2017$week == 17 & plays2017$play_type == "pass" & plays2017$passer_player_name == "T. Brady", 10][[1]]
plays2017[plays2017$week == 16 & plays2017$play_type == "pass" & plays2017$passer_player_name == "T. Brady", 10][[1]]
plays2017[plays2017$week == 15 & plays2017$play_type == "pass" & plays2017$passer_player_name == "T. Brady", 10][[1]]
plays2017[plays2017$week == 15 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", 10][[1]]
plays2017$qbr
plays2017[plays2017$week == 15 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", 10]
plays2017$qbr[1000]
write.csv(plays2017, "test.csv")
plays2017[plays2017$week == 5 & plays2017$play_type == "pass" & plays2017$passer_player_name == "C. Palmer", 10]
# Adding QBR to the dataset
library(nflfastR)
library(tidyverse)
library(vroom)
# Get all pass and rush plays from first 6 weeks of 2017 season
databowlPlays2017 <- vroom("https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/plays.csv")
# Get all play by play data from 2017 season
pbpPlays2017 <- load_pbp(2017)
pbpPlays2017
# Change column names in pbp to make it easily joinable to allPlays2017
colnames(pbpPlays2017)[3] <- "gameId"
colnames(pbpPlays2017)[1] <- "playId"
#Change gameId in pbp data to a double
pbpPlays2017$gameId <- as.double(pbpPlays2017$gameId)
# Join the datasets together
plays2017 <- inner_join(databowlPlays2017, pbpPlays2017,
by = c("gameId", "playId"))
# Decide which variables to keep. This gives us...
### Variables
# defenders in the box
# number of pass rushers
# personnel of defense
# play type
### Other information
# play description
# game ID
# play ID
# week
plays2017 <- plays2017 %>%
select(gameId, playId, week, playDescription,
defendersInTheBox, numberOfPassRushers,
personnel.defense, play_type,
passer_player_name) %>%
# Eliminate special teams plaeys - keep only runs and passes
filter(play_type %in% c("run", "pass"))
# Adding Weeks 1-6 QBR to dataset
# First, get the data from Nate's file
qbr2017 <- vroom("https://raw.githubusercontent.com/cadentwebb/football/main/ESPN%20QBR%20(2017-2018)/2017-2018%20Weekly%20ESPN%20QBR.csv?token=ATH3CLAVYCCXCO6FKQMQD2LASVQJ6")
# Get only 2017 season
qbr2017 <- qbr2017 %>%
filter(season == 2017)
# Add a space to the QB name in the plays2017 dataset
for (i in 1:dim(plays2017)[1]) {
if (!is.na(plays2017$passer_player_name[i])) {
plays2017$passer_player_name[i] <- str_replace(plays2017$passer_player_name[i], "\\.", ". ")
}
}
# Create a qbr column initiated with all zeros
plays2017$qbr <- ifelse(plays2017$play_type == "pass", 0, NA)
# Gather the QB names from plays 2017
qbs <- plays2017 %>%
group_by(passer_player_name) %>%
filter(!is.na(passer_player_name)) %>%
summarize(Count = n())
# Add Weeks 1-6 QBR for each QB to plays2017
for (i in qbs[[1]]) {
for (j in 1:6) {
for (k in 1:dim(plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10])[1]) {
plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10][[1]][k] <- qbr2017[qbr2017$short_name == i & qbr2017$week_text == str_c("Week ", j), 11][[1]][1]
}
}
}
# Adding Weeks 1-6 QBR to dataset
# First, get the data from Nate's file
qbr2017 <- vroom("https://raw.githubusercontent.com/cadentwebb/football/main/ESPN%20QBR%20(2017-2018)/2017-2018%20Weekly%20ESPN%20QBR.csv?token=ATH3CLAVYCCXCO6FKQMQD2LASVQJ6")
#initialize dataframe
weekly_qbr <- data.frame()
#loop throug seasons and weeks
for (i in 2017)
{
for (j in 1:17)
{
week <- espnscrapeR::get_nfl_qbr(season = i, week = j, season_type = "Regular")
qbr2017 <- weekly_qbr %>% rbind(week)
}
}
install.packages("espnscrapeR")
library(espnscrapeR)
install.packages("espnscrapeR")
install.packages("espnscrapeR")
qbr2017 <- vroom("https://raw.githubusercontent.com/cadentwebb/football/main/ESPN%20QBR%20(2017-2018)/2017-2018%20Weekly%20ESPN%20QBR.csv")
qbr2017 <- vroom("https://raw.githubusercontent.com/cadentwebb/football/main/ESPN%20QBR%20(2017-2018)/2017-2018%20Weekly%20ESPN%20QBR.csv?token=ATH3CLE44LHB7SRKOON2TN3ASWBCW")
# Create a qbr column initiated with all zeros
plays2017$qbr <- ifelse(plays2017$play_type == "pass", 0, NA)
# Add Weeks 1-6 QBR for each QB to plays2017
for (i in qbs[[1]]) {
for (j in 1:6) {
for (k in 1:dim(plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10])[1]) {
plays2017[plays2017$week == j & plays2017$play_type == "pass" & plays2017$passer_player_name == i, 10][[1]][k] <- qbr2017[qbr2017$short_name == i & qbr2017$week_text == str_c("Week ", j), 11][[1]][1]
}
}
}
plays2017$qbr
# Get only 2017 season
qbr2017 <- qbr2017 %>%
filter(season == 2017)
# Get all pass and rush plays from first 6 weeks of 2017 season
databowlPlays2017 <- vroom("https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/plays.csv")
library(nflfastR)
library(tidyverse)
library(vroom)
# Get all pass and rush plays from first 6 weeks of 2017 season
databowlPlays2017 <- vroom("https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/plays.csv")
# Get all play by play data from 2017 season
pbpPlays2017 <- load_pbp(2017)
# Change column names in pbp to make it easily joinable to allPlays2017
colnames(pbpPlays2017)[3] <- "gameId"
colnames(pbpPlays2017)[1] <- "playId"
#Change gameId in pbp data to a double
pbpPlays2017$gameId <- as.double(pbpPlays2017$gameId)
# Join the datasets together
plays2017 <- inner_join(databowlPlays2017, pbpPlays2017,
by = c("gameId", "playId"))
write.csv(plays2017, "test.csv")
epa <- read.csv("rolling epa per play.csv")
rm(list = ls())
library(tidyverse)
library(vroom)
file.tracking <- "https://raw.githubusercontent.com/Schmoegurt/Big-Data-Bowl/master/Data/tracking_gameId_2017091713.csv"
tracking.example <- read_csv(file.tracking)
file.game <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/games.csv"
games.sum <- read_csv(file.game)
file.plays <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/plays.csv"
plays.sum <- read_csv(file.plays)
games_vec <- unique(games.sum$gameId)
# for(i in 1:length(games_vec)) {
#     assign(paste0("tracking", games_vec[i]),
#          vroom(paste0("https://raw.githubusercontent.com/ryurko/Big-Data-Bowl/master/Data/tracking_gameId_",games_vec[i],".csv")))
#   print(i)
# }
# my.path is a list of all the games url's.
my.path <- c("https://raw.githubusercontent.com/Schmoegurt/Big-Data-Bowl/master/Data/tracking_gameId_2017090700.csv")
my.data <- list()
# Populate my.path
for(i in 2:length(games_vec)){
my.path <- c(my.path, paste0("https://raw.githubusercontent.com/ryurko/Big-Data-Bowl/master/Data/tracking_gameId_",games_vec[i],".csv"))
}
# vroom all the my.path entries into a list
for (i in 1:length(my.path)){
my.data[[i]] <- vroom(my.path[i])
print(i)
}
library(dplyr)
all_games <- list()
# Trim the list to only include bal_snap, otherwise your computer will break.
for(i in 1:length(games_vec)){
all_games[[i]] <- my.data[[i]] %>% filter(event == "ball_snap" | displayName == "football")
}
library(data.table)
#rbind the list into a single df
all_games.df <- rbindlist(all_games)
all_games.df <- all_games.df %>% filter(displayName == "football" & frame.id == 1 | event == "ball_snap") %>% arrange(gameId, playId)
rm(all_games)
rm(my.data)
rm(tracking.example)
all_games.merged <- all_games.df %>% inner_join(plays.sum) %>% inner_join(games.sum)
# Get rid of special teams plays
all_games.merged <- all_games.merged %>% filter(isSTPlay == FALSE)
# Get rid of duplicate rows
all_games.merged <- all_games.merged[!duplicated(all_games.merged)]
# Create an offense/defense variable
# 1 if on offense, 0 for defense
all_games.merged$pos_team <- ifelse(all_games.merged$homeTeamAbbr == all_games.merged$possessionTeam, "home", "away")
all_games.merged$offense_team <- ifelse(all_games.merged$pos_team == all_games.merged$team, 1, 0)
all_games.merged$game_play <- paste0(all_games.merged$gameId, all_games.merged$playId)
# # This gets me the 22 players when the ball is snapped for non-special teams plays
# normal_plays <- merged.data %>% filter(isSTPlay == FALSE) %>% filter(event == "ball_snap")
# Find the football
football <- all_games.merged %>% filter(isSTPlay == FALSE) %>% filter(displayName == "football")
# Make frame with football x coordinate
football_x <- football[football$displayName== "football" & football$frame.id == 1, c("x", "y", "playId", "gameId", "game_play")]
football_x <- unique(football_x)
# Rename line of scrimmate
names(football_x)[1] <- "football_scrimmage"
names(football_x)[2] <- "football_hash"
length(unique(football_x$game_play))
length(unique(all_games.merged$game_play))
# Join 'em together
normal_plays_scrimmage <- all_games.merged %>% inner_join(football_x)
# Find the distance between players and line of scrimmage
normal_plays_scrimmage$dist_x <- normal_plays_scrimmage$football_scrimmage - normal_plays_scrimmage$x
normal_plays_scrimmage$dist_y <- normal_plays_scrimmage$football_hash - normal_plays_scrimmage$y
normal_plays_scrimmage$total_distance_from_football <- sqrt(normal_plays_scrimmage$dist_y^2 + normal_plays_scrimmage$dist_x^2)
# Who is in the box?
# If not in the box then I assume that they are in coverage.
normal_plays_scrimmage$box <- ifelse(abs(normal_plays_scrimmage$dist_x) < 5 &
abs(normal_plays_scrimmage$dist_y) < 8 &
normal_plays_scrimmage$offense_team == 0, 1, 0)
# Make offense players negative and defense positive
# If they are on offense and greater than 0 then multiply it by -1 so that it is negative.
normal_plays_scrimmage$dist_x <- ifelse(normal_plays_scrimmage$dist_x > 0 & normal_plays_scrimmage$offense_team == 1,
normal_plays_scrimmage$dist_x * -1, normal_plays_scrimmage$dist_x)
# If they are on defense and less than 0 then multiply it by negative 1 so that it is positive.
normal_plays_scrimmage$dist_x <- ifelse(normal_plays_scrimmage$dist_x < 0 & normal_plays_scrimmage$offense_team == 0,
normal_plays_scrimmage$dist_x * -1, normal_plays_scrimmage$dist_x)
#View(normal_plays_scrimmage %>% select(box, offense_team, dist_x, dist_y, total_distance_from_football, displayName))
all_games.merged <- normal_plays_scrimmage
chulls <- NA
far_right_off <- NA
far_left_off <- NA
far_left_def <- NA
far_right_def <- NA
depth_safety1 <- NA
depth_safety2 <- NA
depth_corner1 <- NA
depth_corner2 <- NA
furthest_deep <- NA
furthest_deep2 <- NA
loop_data <- NA
all_games.merged <- all_games.merged %>% filter(displayName != "football")
for(i in 1:length(unique(all_games.merged$game_play))){
library(dplyr)
# Get the play I want
area <- all_games.merged %>% filter(game_play == unique(all_games.merged$game_play)[i]) %>% filter(displayName != "football")
if(nrow(area) > 21 & !is.na(area$dist_x[1])){
defense <- area %>% filter(offense_team == 0) %>% dplyr::select(x,y)
# Find the convex hull
library(grDevices)
convex_hull <- defense %>% dplyr::slice(chull(x, y))
# Find chulls
chulls[i] <- geometry::polyarea(convex_hull$x, convex_hull$y)
# Assign distances
far_right_off[i] <- max(area[area$offense_team == 1, "dist_y"])
far_left_off[i] <- min(area[area$offense_team == 1, "dist_y"])
far_right_def[i] <- max(area[area$offense_team == 0, "dist_y"])
far_left_def[i] <- min(area[area$offense_team == 0, "dist_y"])
furthest_deep[i] <- max(area[area$offense_team == 0, "dist_x"])
value <- area %>% filter(offense_team == 0) %>% arrange(abs(dist_x)) %>% dplyr::select(dist_x) %>% slice(10)
furthest_deep2[i] <- value$dist_x
corner1 <- area[area$offense_team == 0 & area$dist_y == max(far_left_def[i]), "dist_x"]
depth_corner1[i] <- corner1$dist_x
corner2 <- area[area$offense_team == 0 & area$dist_y == max(far_right_def[i]), "dist_x"]
depth_corner2[i] <- corner2$dist_x
}
}
chulls_df <- data.frame(chulls = chulls, game_play =  unique(all_games.merged$game_play), off_right = far_right_off, off_left = far_left_off, def_right = far_right_def, def_left = far_left_def, def_deep_1 = furthest_deep, def_deep2 = furthest_deep2, corner_right_deep = depth_corner1, corner_left_deep = depth_corner2)
chulls_merge <- all_games.merged %>% inner_join(chulls_df)
chulls_merge <- chulls_merge[!is.na(chulls_merge$corner_left_deep),]
library(nflfastR)
pbp2017 <- nflfastR::load_pbp(2017)
names(pbp2017)[1] <- "playId"
names(pbp2017)[3] <- "gameId"
pbpPlays2017 <- load_pbp(2017)
# Change column names in pbp to make it easily joinable to allPlays2017
colnames(pbpPlays2017)[3] <- "gameId"
colnames(pbpPlays2017)[1] <- "playId"
#Change gameId in pbp data to a double
pbpPlays2017$gameId <- as.double(pbpPlays2017$gameId)
# Join the datasets together
chulls_pbp <- left_join(chulls_merge, pbpPlays2017,
by = c("gameId", "playId"))
colnames(chulls_pbp)
# Make sure you use chulls.model. This gives you just one instance of each play. Otherwise your results will be messed up.
chulls.model <- chulls_pbp %>% arrange(game_play) %>% group_by(game_play) %>% slice(1)
library(ggplot2)
ggplot(data = chulls.model, mapping = aes(x = chulls)) +
geom_histogram()
ggplot(data = chulls.model, mapping = aes(x = chulls, y = as.factor(pass))) +
geom_boxplot() +
facet_wrap(~down.y)
library(dplyr)
chulls.model$corner_left_deep
pass_chull <- glm(data = chulls.model %>% filter(down.y < 4) %>% filter(quarter < 4) %>% filter(yardline_100 > 40), formula = as.factor(pass) ~ as.factor(down.y) + yardsToGo +  yardline_100 + chulls + defendersInTheBox, family = binomial(link = "logit"))
result_chull <- glm(data = chulls.model %>% filter(down.y < 4) %>% filter(quarter < 4) %>% filter(yardline_100 > 20), formula = PlayResult ~ as.factor(down.y) + yardsToGo +  yardline_100 + chulls)
summary(result_chull)
madden17QB <- read.csv('madden17QB.csv')
madden17RB <- read.csv('madden17RB.csv')
qb_chulls <- merge(x = chulls.model, y = madden17QB, by = "displayName", all = TRUE)
chulls.model <- merge(x = qb_chulls, y = madden17RB, by = "displayName", all = TRUE)
# Get all pass and rush plays from first 6 weeks of 2017 season
databowlPlays2017 <- vroom("https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/plays.csv")
# Get all play by play data from 2017 season
pbpPlays2017 <- load_pbp(2017)
# Change column names in pbp to make it easily joinable to allPlays2017
colnames(pbpPlays2017)[3] <- "gameId"
colnames(pbpPlays2017)[1] <- "playId"
#Change gameId in pbp data to a double
pbpPlays2017$gameId <- as.double(pbpPlays2017$gameId)
# Join the datasets together
plays2017 <- inner_join(databowlPlays2017, pbpPlays2017,
by = c("gameId", "playId"))
# Adding Weeks 1-6 QBR to dataset
# First, get the data from Nate's file
qbr2017 <- read_csv("2017-2018 Weekly ESPN QBR.csv")
# Get only 2017 season
qbr2017 <- qbr2017 %>%
filter(season == 2017)
# Create a qbr column initiated with all zeros for pass plays and NA for run plays
plays2017$qbr <- rep(0, dim(plays2017)[1])
# Gather the QB names from plays 2017
teams <- plays2017 %>%
group_by(posteam) %>%
filter(!is.na(posteam)) %>%
summarize(Count = n())
# Add Weeks 1-6 QBR for each QB to every play in plays2017
for (i in teams[[1]]) {
for (j in 1:6) {
for (k in 1:dim(plays2017[plays2017$week == j & plays2017$posteam == i, 12])[1]) {
plays2017[plays2017$week == j & plays2017$posteam == i, "qbr"][[1]][k] <- qbr2017[qbr2017$team_abb == i & qbr2017$week_text == str_c("Week ", j), 11][[1]][1]
}
}
}
# This code will add the defensive ranking to the plays2017 dataset
# Get defensive ranking from 2017
library(rvest)
defRanks <- "https://www.pro-football-reference.com/years/2017/opp.htm" %>%
read_html() %>%
html_node("table") %>%
html_table()
colnames(defRanks) <- c("Rank", "Team", "Games", "PF", "TotalYds", "TotalPlays", "YardsPerPlay",
"Takeaways", "FumblesLost", "FirstDowns", "PassComp", "PassAtt", "PassYds",
"PassTD", "Int", "YardsPerPass", "PassFirstDowns", "RunAtt", "RunYds",
"RunTD", "YardsPerRun", "RunFirstDowns", "Penalties", "PenaltyYds",
"PenaltyFirstDowns", "OffenseScorePercent", "TakeawayPercent",
"ExpectedPoints")
defRanks <- defRanks %>%
slice(2:33)
# Get team abbreviations
teamAbbreviations <- plays2017 %>%
group_by(defteam) %>%
summarize(Count = n())
# Set up the data to match with the defensive ranking data
# Give defRanks the appropriate team abbreviations
# First, change Oakland to Las Vegas
teamAbbreviations$defteam <- ifelse(teamAbbreviations$defteam == "LV", "OAK", teamAbbreviations$defteam)
# Make teamAbbreviations an atomic vector
teamAbbreviations <- teamAbbreviations[[1]]
# Organize the names in alphabetical order
teamAbbreviations <- teamAbbreviations[order(teamAbbreviations)]
# Switch LA Rams and LA Chargers (helps with alphabetical order later on)
x <- teamAbbreviations[18]
teamAbbreviations[18] <- teamAbbreviations[17]
teamAbbreviations[17] <- x
teamAbbreviations
# Give defRanks the appropriate team abbreviations
defRanks$TeamAbb <- rep(0, dim(defRanks)[1])
defRanks[order(defRanks[, "Team"]), ]$TeamAbb <- teamAbbreviations
# Now, apply defensive rank to the plays2017 dataset
plays2017$defRank <- rep(0, dim(plays2017)[1])
for (i in 1:dim(plays2017)[1]) {
for (j in defRanks$TeamAbb) {
if (plays2017$defteam[i] == j) {
plays2017$defRank[i] <- defRanks[defRanks$TeamAbb == j, 1]
}
}
}
plays2017$defRank <- as.integer(plays2017$defRank)
# First, gather all gameIds
gameIds <- plays2017 %>%
group_by(gameId) %>%
summarize(Count = n())
gameIds <- gameIds[[1]]
# Add whether or not the defense blitzed on a pass play
plays2017$isBlitz <- ifelse(plays2017$numberOfPassRushers > 4, 1, 0)
for (i in 1:dim(plays2017)[1]) {
if (is.na(plays2017$isBlitz[i])) {
plays2017$isBlitz[i] <- 0
}
}
# Loops through the dataset and inserts the total number of sacks, interceptions,
# and average pass rushers thus far in a game.
plays2017$totalSacksGame <- rep(0, dim(plays2017)[1])
plays2017$totalIntGame <- rep(0, dim(plays2017)[1])
plays2017$avgPassRushers <- rep(0, dim(plays2017)[1])
plays2017$totalPassBlitzGame <- rep(0, dim(plays2017)[1])
for (i in gameIds) {
for (j in teams[[1]]) {
totalSacks <- 0
totalInt <- 0
totalBlitz <- 0
avgPassRushers <- 0
sumPassRushers <- 0
passRushPlays <- 0
for (k in 1:dim(plays2017)[1]) {
if (plays2017$gameId[k] == i & plays2017$defteam[k] == j) {
# Sacks
totalSacks <- totalSacks + plays2017$sack[k]
plays2017$totalSacksGame[k] <- totalSacks
# Interceptions
totalInt <- totalInt + plays2017$interception[k]
plays2017$totalIntGame[k] <- totalInt
# Blitz
totalBlitz <- totalBlitz + plays2017$isBlitz[k]
plays2017$totalPassBlitzGame[k] <- totalBlitz
if (!is.na(plays2017$numberOfPassRushers[k])) {
# Average pass rushers
passRushPlays <- passRushPlays + 1
sumPassRushers <- sumPassRushers + plays2017$numberOfPassRushers[k]
avgPassRushers <- sumPassRushers / passRushPlays
plays2017$avgPassRushers[k] <- avgPassRushers
} else {
plays2017$avgPassRushers[k] <- avgPassRushers
}
}
}
}
}
# Add number of defensive personnel on any given play
plays2017$numDL <- rep(0, dim(plays2017)[1])
plays2017$numLB <- rep(0, dim(plays2017)[1])
plays2017$numDB <- rep(0, dim(plays2017)[1])
for (i in 1:dim(plays2017)[1]) {
plays2017$numDL[i] <- substr(plays2017$personnel.defense[i], 1, 1)
plays2017$numLB[i] <- substr(plays2017$personnel.defense[i], 7, 7)
plays2017$numDB[i] <- substr(plays2017$personnel.defense[i], 13, 13)
}
plays2017$numDL <- as.integer(plays2017$numDL)
plays2017$numLB <- as.integer(plays2017$numLB)
plays2017$numDB <- as.integer(plays2017$numDB)
chulls.model <- inner_join(chulls.model, plays2017)
colnames(chulls.model)
epa <- read.csv("rolling epa per play.csv")
chulls.model <- inner_join(chulls.model, epa)
colnames(chulls.model)
write.csv(chulls.model, "FinalDataset.csv")
