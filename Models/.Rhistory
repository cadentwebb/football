# If not in the box then I assume that they are in coverage.
normal_plays_scrimmage$box <- ifelse(abs(normal_plays_scrimmage$dist_x) < 5 &
abs(normal_plays_scrimmage$dist_y) < 8 &
normal_plays_scrimmage$offense_team == 0, 1, 0)
# This is where you choose what play you want within the game. Just change what the playID is equal to.
# ie change 3745 to 63 or whatever
example.play <- normal_plays_scrimmage %>% filter(playId == 3853) %>% filter(event == "ball_snap")
## General field boundaries
xmin <- 0
xmax <- 160/3
hash.right <- 38.35
hash.left <- 12
hash.width <- 3.3
defense <- example.play %>% filter(offense_team == 0)
data <- tibble(x = defense$x, y = defense$y)
convex_hull <- data %>% slice(chull(x, y))
## Specific boundaries for a given play
ymin <- max(round(min(example.play$x, na.rm = TRUE) - 10, -1), 0)
ymax <- min(round(max(example.play$x, na.rm = TRUE) + 10, -1), 120)
df.hash <- expand.grid(x = c(0, 23.36667, 29.96667, xmax), y = (10:110))
df.hash <- df.hash %>% filter(!(floor(y %% 5) == 0))
df.hash <- df.hash %>% filter(y < ymax, y > ymin)
# Now plot
ggplot() +
ylim(ymin, ymax) + coord_fixed() +
labs(title = paste("Play Number:", example.play$playId[1], ", Home Team:", example.play$homeTeamAbbr[1], "-",
example.play$HomeScoreAfterPlay[1],
"Away Team:", example.play$visitorTeamAbbr[1], "-", example.play$VisitorScoreAfterPlay[1] ),
subtitle = paste(example.play$down[1], example.play$yardsToGo[1], example.play$playDescription[1]),
caption = paste("Defensive Personnel:", example.play$personnel.defense[1], "       Offensive Personnel:", example.play$personnel.offense[1])) +
scale_size_manual(values = c(6, 4, 6), guide = FALSE) +
scale_shape_manual(values = c(21, 16, 21), guide = FALSE) +
#scale_fill_manual(values = c("#e31837", "#654321", "#002244"), guide = FALSE) +
#scale_colour_manual(values = c("black", "#654321", "#c60c30"), guide = FALSE) +
annotate("text", x = df.hash$x[df.hash$x < 55/2],
y = df.hash$y[df.hash$x < 55/2], label = "_", hjust = 0, vjust = -0.2) +
annotate("text", x = df.hash$x[df.hash$x > 55/2],
y = df.hash$y[df.hash$x > 55/2], label = "_", hjust = 1, vjust = -0.2) +
annotate("segment", x = xmin,
y = seq(max(10, ymin), min(ymax, 110), by = 5),
xend =  xmax,
yend = seq(max(10, ymin), min(ymax, 110), by = 5)) +
annotate("text", x = rep(hash.left, 11), y = seq(10, 110, by = 10),
label = c("G   ", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "   G"),
angle = 270, size = 4) +
annotate("text", x = rep((xmax - hash.left), 11), y = seq(10, 110, by = 10),
label = c("   G", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "G   "),
angle = 90, size = 4) +
annotate("segment", x = c(xmin, xmin, xmax, xmax),
y = c(ymin, ymax, ymax, ymin),
xend = c(xmin, xmax, xmax, xmin),
yend = c(ymax, ymax, ymin, ymin), colour = "black") +
# Player locations
geom_point(data = example.play, aes(x = (xmax-y), y = x, color = as.factor(offense_team)), alpha = 0.7, size = 4) +
geom_polygon(data = convex_hull, mapping = aes(x = xmax-y, y = x),alpha = 0.25) +
theme(legend.position = "none")
#yardsToGo, game_seconds_remaining, defteam, score_differential, totalSacksGame, totalIntGame,
#numDL, numLB, numDB, chulls, chulls_ratio, qbr
t.test(outlier_plays_2nd_long$chulls, expected_plays_2nd_long$chulls)
#0.05216
t.test(outlier_plays_2nd_long$chulls_ratio, expected_plays_2nd_long$chulls_ratio)
#0.001024
t.test(outlier_plays_2nd_long$defendersInTheBox, expected_plays_2nd_long$defendersInTheBox)
#0.01173
t.test(outlier_plays_2nd_long$game_seconds_remaining, expected_plays_2nd_long$game_seconds_remaining)
#0.004616
t.test(outlier_plays_2nd_long$score_differential, expected_plays_2nd_long$score_differential)
#0.2318
t.test(outlier_plays_2nd_long$totalSacksGame, expected_plays_2nd_long$totalSacksGame)
#0.04452
t.test(outlier_plays_2nd_long$totalIntGame, expected_plays_2nd_long$totalIntGame)
#0.01157
t.test(outlier_plays_2nd_long$numDL, expected_plays_2nd_long$numDL)
#0.02396
t.test(outlier_plays_2nd_long$numLB, expected_plays_2nd_long$numLB)
#0.001701
t.test(outlier_plays_2nd_long$numDB, expected_plays_2nd_long$numDB)
#0.261
t.test(outlier_plays_2nd_long$totalPassBlitzGame, expected_plays_2nd_long$totalPassBlitzGame)
#0.01623
t.test(outlier_plays_2nd_long$yardsToGo, expected_plays_2nd_long$yardsToGo)
#0.06462
# Boxplot of chulls_ratio of expected passes
finalDataset %>%
filter(down.x == 2 & yardsToGo > 10) %>%
filter(posteam %in% c("NE", "HOU", "SF", "ATL", "CLE", "ARI")) %>%
ggplot(mapping = aes(x = pass, y = chulls_ratio, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Ratio for 2nd and Long",
subtitle = "Expected pass vs. Unexpected run")
finalDataset %>%
filter(down.x == 2 & ydstogo > 10) %>%
group_by(posteam) %>%
summarize(PropPass = round(mean(pass), 2),
Total = n(),
NumPasses = round(PropPass * n()),
NumRuns = Total - NumPasses) %>%
arrange(PropPass)
outlier_passes_2nd_long <- finalDataset %>%
filter(down.x == 2 & yardsToGo > 10) %>%
filter(posteam %in% c("LA", "MIA")) %>%
filter(pass == 1)
expected_runs_2nd_long <- finalDataset %>%
filter(down.x == 2 & yardsToGo > 10) %>%
filter(posteam %in% c("LA", "MIA")) %>%
filter(pass == 0)
# Let's try a t.test for "chulls"
t.test(outlier_passes_2nd_long$chulls, expected_runs_2nd_long$chulls)
# Significance!
# Let's try for chulls_ratio
t.test(outlier_passes_2nd_long$chulls_ratio, expected_runs_2nd_long$chulls_ratio)
# Significance
# What abour others - defendersInTheBox
t.test(outlier_passes_2nd_long$defendersInTheBox, expected_runs_2nd_long$defendersInTheBox)
# Almost significance - p-value of 0.055!
finalDataset %>%
filter(down.x == 2 & yardsToGo > 10) %>%
filter(posteam %in% c("LA", "MIA")) %>%
ggplot(mapping = aes(x = pass, y = chulls, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Ratio for 2nd and Long",
subtitle = "Expected run vs. Unexpected pass")
finalDataset %>%
filter(down.x == 3 & yardsToGo < 5) %>%
group_by(posteam) %>%
summarize(PropPass = round(mean(pass), 2),
Total = n(),
NumPasses = round(PropPass * n()),
NumRuns = Total - NumPasses) %>%
arrange(desc(PropPass))
finalDataset %>%
filter(down.x == 3 & yardsToGo < 5) %>%
filter(posteam == "DET") %>%
filter(pass == 0) %>%
select(gameId, playId, game_seconds_remaining, score_differential)
#This is the script to plot one single play.
# Read in packages
library(tidyverse)
library(vroom)
# The first thing you need to do is change the play id to match the play id at the end of the string below this.
# For example change 2017091400 to the ID of the play that you want.
file.tracking <- "https://raw.githubusercontent.com/Schmoegurt/Big-Data-Bowl/master/Data/tracking_gameId_2017101504.csv"
tracking.example <- vroom(file.tracking)
file.game <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/games.csv"
games.sum <- read_csv(file.game)
file.plays <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/plays.csv"
plays.sum <- read_csv(file.plays)
merged.data <- tracking.example %>% inner_join(games.sum) %>% inner_join(plays.sum)
# This gets me the 22 players when the ball is snapped for non-special teams plays
normal_plays <- merged.data %>% filter(isSTPlay == FALSE) %>% filter(event == "ball_snap")
# Find the football
football <- merged.data %>% filter(isSTPlay == FALSE) %>% filter(displayName == "football")
# Make frame with football x coordinate
football_x <- football[football$displayName== "football" & football$frame.id == 1, c("x", "y", "playId")]
# Rename line of scrimmate
names(football_x)[1] <- "football_scrimmage"
names(football_x)[2] <- "football_y"
# Join 'em together
normal_plays_scrimmage <- normal_plays %>% left_join(football_x)
# Find the distance between players and line of scrimmage
# Offensive players negative, defensive players positive
normal_plays_scrimmage$dist_x <- normal_plays_scrimmage$football_scrimmage - normal_plays_scrimmage$x
normal_plays_scrimmage$dist_y <- normal_plays_scrimmage$football_y - normal_plays_scrimmage$y
normal_plays_scrimmage$total_distance_from_football <- sqrt(normal_plays_scrimmage$dist_y^2 + normal_plays_scrimmage$dist_x^2)
# Create an offense/defense variable
# 1 if on offense, 0 for defense
normal_plays_scrimmage$pos_team <- ifelse(normal_plays_scrimmage$homeTeamAbbr == normal_plays_scrimmage$possessionTeam, "home", "away")
normal_plays_scrimmage$offense_team <- ifelse(normal_plays_scrimmage$pos_team == normal_plays_scrimmage$team, 1, 0)
# Who is in the box?
# If not in the box then I assume that they are in coverage.
normal_plays_scrimmage$box <- ifelse(abs(normal_plays_scrimmage$dist_x) < 5 &
abs(normal_plays_scrimmage$dist_y) < 8 &
normal_plays_scrimmage$offense_team == 0, 1, 0)
# This is where you choose what play you want within the game. Just change what the playID is equal to.
# ie change 3745 to 63 or whatever
example.play <- normal_plays_scrimmage %>% filter(playId == 1539) %>% filter(event == "ball_snap")
## General field boundaries
xmin <- 0
xmax <- 160/3
hash.right <- 38.35
hash.left <- 12
hash.width <- 3.3
defense <- example.play %>% filter(offense_team == 0)
data <- tibble(x = defense$x, y = defense$y)
convex_hull <- data %>% slice(chull(x, y))
## Specific boundaries for a given play
ymin <- max(round(min(example.play$x, na.rm = TRUE) - 10, -1), 0)
ymax <- min(round(max(example.play$x, na.rm = TRUE) + 10, -1), 120)
df.hash <- expand.grid(x = c(0, 23.36667, 29.96667, xmax), y = (10:110))
df.hash <- df.hash %>% filter(!(floor(y %% 5) == 0))
df.hash <- df.hash %>% filter(y < ymax, y > ymin)
# Now plot
ggplot() +
ylim(ymin, ymax) + coord_fixed() +
labs(title = paste("Play Number:", example.play$playId[1], ", Home Team:", example.play$homeTeamAbbr[1], "-",
example.play$HomeScoreAfterPlay[1],
"Away Team:", example.play$visitorTeamAbbr[1], "-", example.play$VisitorScoreAfterPlay[1] ),
subtitle = paste(example.play$down[1], example.play$yardsToGo[1], example.play$playDescription[1]),
caption = paste("Defensive Personnel:", example.play$personnel.defense[1], "       Offensive Personnel:", example.play$personnel.offense[1])) +
scale_size_manual(values = c(6, 4, 6), guide = FALSE) +
scale_shape_manual(values = c(21, 16, 21), guide = FALSE) +
#scale_fill_manual(values = c("#e31837", "#654321", "#002244"), guide = FALSE) +
#scale_colour_manual(values = c("black", "#654321", "#c60c30"), guide = FALSE) +
annotate("text", x = df.hash$x[df.hash$x < 55/2],
y = df.hash$y[df.hash$x < 55/2], label = "_", hjust = 0, vjust = -0.2) +
annotate("text", x = df.hash$x[df.hash$x > 55/2],
y = df.hash$y[df.hash$x > 55/2], label = "_", hjust = 1, vjust = -0.2) +
annotate("segment", x = xmin,
y = seq(max(10, ymin), min(ymax, 110), by = 5),
xend =  xmax,
yend = seq(max(10, ymin), min(ymax, 110), by = 5)) +
annotate("text", x = rep(hash.left, 11), y = seq(10, 110, by = 10),
label = c("G   ", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "   G"),
angle = 270, size = 4) +
annotate("text", x = rep((xmax - hash.left), 11), y = seq(10, 110, by = 10),
label = c("   G", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "G   "),
angle = 90, size = 4) +
annotate("segment", x = c(xmin, xmin, xmax, xmax),
y = c(ymin, ymax, ymax, ymin),
xend = c(xmin, xmax, xmax, xmin),
yend = c(ymax, ymax, ymin, ymin), colour = "black") +
# Player locations
geom_point(data = example.play, aes(x = (xmax-y), y = x, color = as.factor(offense_team)), alpha = 0.7, size = 4) +
geom_polygon(data = convex_hull, mapping = aes(x = xmax-y, y = x),alpha = 0.25) +
theme(legend.position = "none")
outlier_runs_3rd_short <- finalDataset %>%
filter(down.x == 3 & yardsToGo < 5) %>%
filter(posteam %in% c("DET", "GB", "WAS", "SEA")) %>%
filter(pass == 0)
expected_passes_3rd_short <- finalDataset %>%
filter(down.x == 3 & yardsToGo < 5) %>%
filter(posteam %in% c("DET", "GB", "WAS", "SEA")) %>%
filter(pass == 1)
t.test(outlier_runs_3rd_short$chulls_ratio, expected_passes_3rd_short$chulls_ratio)
t.test(outlier_runs_3rd_short$chulls, expected_passes_3rd_short$chulls)
t.test(outlier_runs_3rd_short$numDB, expected_passes_3rd_short$numDB)
t.test(outlier_runs_3rd_short$numDL, expected_passes_3rd_short$numDL)
t.test(outlier_runs_3rd_short$WR_space, expected_passes_3rd_short$WR_space)
t.test(outlier_runs_3rd_short$defendersInTheBox, expected_passes_3rd_short$defendersInTheBox)
# Significant! More defenders in the box on the unexpected runs.
t.test(outlier_runs_3rd_short$game_seconds_remaining, expected_passes_3rd_short$game_seconds_remaining)
t.test(outlier_runs_3rd_short$RBrating, expected_passes_3rd_short$RBrating)
t.test(outlier_runs_3rd_short$QBrating, expected_passes_3rd_short$QBrating)
t.test(outlier_runs_3rd_short$totalSacksGame, expected_passes_3rd_short$totalSacksGame)
t.test(outlier_runs_3rd_short$totalPassBlitzGame, expected_passes_3rd_short$totalPassBlitzGame,
alternative = "less")
# Significant! Less pass blitzes on the unexpected runs.
t.test(outlier_runs_3rd_short$avgPassRushers, expected_passes_3rd_short$avgPassRushers)
finalDataset %>%
filter(down.x == 1 & yardsToGo == 10) %>%
# Boxplot of chulls_ratio of expected passes
finalDataset %>%
filter(down.x == 2 & ydstogo >= 10) %>%
filter(game_seconds_remaining > 240 & half_seconds_remaining > 120) %>%
filter(abs(score_differential) < 17) %>%
filter(posteam %in% c("ARI", "NE", "NYG", "BAL", "HOU", "TB", "CLE", "NYJ")) %>%
ggplot(mapping = aes(x = pass, y = chulls_ratio, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Ratio for 2nd and Long",
subtitle = "Expected pass vs. Unexpected run")
# Boxplot of chulls_ratio of expected passes
finalDataset %>%
filter(down.x == 2 & ydstogo >= 10) %>%
filter(game_seconds_remaining > 240 & half_seconds_remaining > 120) %>%
filter(abs(score_differential) < 17) %>%
filter(posteam %in% c("ARI", "NE", "NYG", "BAL", "HOU", "TB", "CLE", "NYJ")) %>%
ggplot(mapping = aes(x = pass, y = defendersInTheBox, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Ratio for 2nd and Long",
subtitle = "Expected pass vs. Unexpected run")
# Boxplot of chulls_ratio of expected passes
finalDataset %>%
filter(down.x == 2 & ydstogo >= 10) %>%
filter(game_seconds_remaining > 240 & half_seconds_remaining > 120) %>%
filter(abs(score_differential) < 17) %>%
filter(posteam %in% c("ARI", "NE", "NYG", "BAL", "HOU", "TB", "CLE", "NYJ")) %>%
ggplot(mapping = aes(x = pass, y = chulls, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Ratio for 2nd and Long",
subtitle = "Expected pass vs. Unexpected run")
# Boxplot of chulls_ratio of expected passes
finalDataset %>%
filter(down.x == 2 & ydstogo >= 10) %>%
filter(game_seconds_remaining > 240 & half_seconds_remaining > 120) %>%
filter(abs(score_differential) < 17) %>%
filter(posteam %in% c("ARI", "NE", "NYG", "BAL", "HOU", "TB", "CLE", "NYJ")) %>%
ggplot(mapping = aes(x = pass, y = chulls_ratio, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Measure for 2nd and Long",
subtitle = "Expected pass vs. Unexpected run")
# Boxplot of chulls_ratio of expected passes
finalDataset %>%
filter(down.x == 2 & ydstogo >= 10) %>%
filter(game_seconds_remaining > 240 & half_seconds_remaining > 120) %>%
filter(abs(score_differential) < 17) %>%
filter(posteam %in% c("ARI", "NE", "NYG", "BAL", "HOU", "TB", "CLE", "NYJ")) %>%
ggplot(mapping = aes(x = pass, y = chulls_ratio, group = pass)) +
geom_boxplot() +
theme_bw() +
theme(aspect.ratio = 1) +
labs(x = "Pass?", y = "Ratio of Offensive vs. Defensive Chulls",
title = "Chulls Ratio for 2nd and Long",
subtitle = "Expected pass vs. Unexpected run")
#Modeling
data <- read.csv("Final Dataset_ratings copy.csv")
#Modeling
data <- read.csv("FinalDataset_ratings copy.csv")
knitr::opts_chunk$set(echo = TRUE)
h_data <- read.csv("Complete Dataset/FinalDataset.csv")
h_data <- read.csv("Create Dataset/FinalDataset.csv")
h_data <- read.csv("~/Create Dataset/FinalDataset.csv")
h_data <- read.csv("FinalDataset_ratings copy.csv")
# read in data
df <- read.csv("FinalDataset_ratings copy.csv")
library(tidyverse)
library(bestglm)
library(car)
# read in final dataset
# Found in "models" folder in github
data <- read.csv("FinalDataset_ratings copy.csv")
library(tidyverse)
library(vroom)
library(mefa4)
finalDataset <- read.csv("FinalDataset_ratings copy.csv")
# read in final dataset
# Found in "models" folder in github
prop.model <- read.csv("FinalDataset_ratings copy 2.csv")
# read in final dataset
# Found in "models" folder in github
prop.model <- read.csv("FinalDataset_ratings copy 2.csv")
# read in final dataset
# Found in "models" folder in github
prop.model <- read.csv("FinalDataset_ratings copy 2.csv")
# read in final dataset
# Found in "models" folder in github
prop.model <- read.csv("FinalDataset_ratings copy 2.csv")
# read in final dataset
# Found in "models" folder in github
prop.model <- read.csv("FinalDataset_ratings copy 2.csv")
# read in final dataset
# Found in "models" folder in github
prop.model <- read.csv("FinalDataset_ratings copy 2.csv")
knitr::opts_chunk$set(echo = TRUE)
data_ratings <- read.csv("FinalDataset_ratings copy.csv")
knitr::opts_chunk$set(echo = TRUE)
# read in final dataset
# Found in "models" folder in github
h_data <- read.csv("FinalDataset_ratings copy.csv")
h_data$game_play <- as.character(h_data$game_play)
h_data <- h_data %>%
select(-OLrating, -QBrating, -RBrating)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# read in final dataset
# Found in "models" folder in github
data_ratings <- read.csv("FinalDataset_ratings copy.csv")
data_ratings$game_play <- as.character(h_data$game_play)
#Get levels for measuring outcome
#May need to take out some plays (throw aways, spikes, qb kneels etc)
#Get column for pass plays
data_ratings$pass_type <- paste0(data_ratings$pass_length, " ",data_ratings$pass_location)
data_ratings$pass_type <- ifelse(data_ratings$pass_type == "NA NA", NA, data_ratings$pass_type)
data_ratings$pass_type <- ifelse((data_ratings$pass_type == "short right" | data_ratings$pass_type == "short left"),
"short outside", data_ratings$pass_type)
data_ratings$pass_type <- ifelse((data_ratings$pass_type == "deep right" | data_ratings$pass_type == "deep left"),
"deep outside", data_ratings$pass_type)
data_ratings$run_type <- paste0(data_ratings$run_location, " ",data_ratings$run_gap)
data_ratings$run_type <- ifelse(data_ratings$run_type == "NA NA", NA, data_ratings$run_type)
data_ratings$run_type <- ifelse(data_ratings$run_type == "middle NA", "middle", data_ratings$run_type)
data_ratings$run_type <- ifelse((data_ratings$run_type != "middle" & !is.na(data_ratings$run_type)), "outside", data_ratings$run_type)
#Get the play classification
data_ratings$play_class <- ifelse(is.na(data_ratings$pass_type), data_ratings$run_type, data_ratings$pass_type)
#Drop other plays like special team and stuff
mn_data <- drop_na(data_ratings, play_class)
mn_data <- drop_na(data_ratings, pass)
sum(is.na(mn_data$play_class))
sum(is.na(mn_data$pass))
library(nnet)
mn_data$play_class <- as.factor(mn_data$play_class)
mn_data$down.x <- as.factor(mn_data$down.x)
mn_data$quarter <- as.factor(mn_data$quarter)
mn_data$isBlitz <- as.factor(mn_data$isBlitz)
#split into train test
library(caret)
#play_index <- createDataPartition(mn_data$play_type, p = 0.7, list = FALSE)
#train_data <- mn_data[play_index, ]
#test_data  <- mn_data[-play_index, ]
#Set short middel pass as the baseline
#train_data$play_class <- relevel(train_data$play_class, ref = "pass short middle")
library(ISLR)
install.packages("ISLR")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ISLR)
library(caret)
library(nnet)
# read in final dataset
# Found in "models" folder in github
data_ratings <- read.csv("FinalDataset_ratings copy.csv")
data_ratings$game_play <- as.character(h_data$game_play)
#Get levels for measuring outcome
#May need to take out some plays (throw aways, spikes, qb kneels etc)
#Get column for pass plays
data_ratings$pass_type <- paste0(data_ratings$pass_length, " ",data_ratings$pass_location)
data_ratings$pass_type <- ifelse(data_ratings$pass_type == "NA NA", NA, data_ratings$pass_type)
data_ratings$pass_type <- ifelse((data_ratings$pass_type == "short right" | data_ratings$pass_type == "short left"),
"short outside", data_ratings$pass_type)
data_ratings$pass_type <- ifelse((data_ratings$pass_type == "deep right" | data_ratings$pass_type == "deep left"),
"deep outside", data_ratings$pass_type)
data_ratings$run_type <- paste0(data_ratings$run_location, " ",data_ratings$run_gap)
data_ratings$run_type <- ifelse(data_ratings$run_type == "NA NA", NA, data_ratings$run_type)
data_ratings$run_type <- ifelse(data_ratings$run_type == "middle NA", "middle", data_ratings$run_type)
data_ratings$run_type <- ifelse((data_ratings$run_type != "middle" & !is.na(data_ratings$run_type)), "outside", data_ratings$run_type)
#Get the play classification
data_ratings$play_class <- ifelse(is.na(data_ratings$pass_type), data_ratings$run_type, data_ratings$pass_type)
#Drop other plays like special team and stuff
mn_data <- drop_na(data_ratings, play_class)
mn_data <- drop_na(data_ratings, pass)
sum(is.na(mn_data$play_class))
sum(is.na(mn_data$pass))
mn_data$play_class <- as.factor(mn_data$play_class)
mn_data$down.x <- as.factor(mn_data$down.x)
mn_data$quarter <- as.factor(mn_data$quarter)
mn_data$isBlitz <- as.factor(mn_data$isBlitz)
#split into train test
#play_index <- createDataPartition(mn_data$play_type, p = 0.7, list = FALSE)
#train_data <- mn_data[play_index, ]
#test_data  <- mn_data[-play_index, ]
#Set short middel pass as the baseline
#train_data$play_class <- relevel(train_data$play_class, ref = "pass short middle")
hier_mod <- glm(pass ~ defendersInTheBox + numDL + numLB + numDB + defRank + isBlitz + totalSacksGame + totalIntGame + avgPassRushers + totalPassBlitzGame + safety_depth + avg_corner_depth
+ chulls+ chulls_ratio, data = mn_data, family = binomial)
#Log odds scale
#My interpretation of logisitc regression coefficients is rusty
summary(hier_mod)
#Exponentiate coefficients
exp(coef(hier_mod))
#Look at original class distributions
# prop.table(table(train_data$pass))
#Evaluate the model
# Predicting the values for train dataset
vars <- mn_data %>%
select(defendersInTheBox, numDL, numLB, numDB, defRank, isBlitz, totalSacksGame, totalIntGame, avgPassRushers, totalPassBlitzGame, safety_depth, avg_corner_depth, chulls, chulls_ratio)
vars$predicted <- predict(hier_mod, newdata = vars, "response")
vars$real <- mn_data$pass
vars$class <- mn_data$play_class
vars <- drop_na(vars, predicted)
#Look at distribution
plot(density(vars$predicted))
vars$pred_pass <- ifelse(vars$predicted > 0.55, 1,0)
prop.table(table(vars$pred_pass))
# Building classification table
ctable <- table(vars$real, vars$pred_pass)
ctable
# Calculating accuracy - sum of diagonal elements divided by total obs
round((sum(diag(ctable))/sum(ctable))*100,2)
#Include predicted probability in mn class
vars <- drop_na(vars, class)
mod_4 <- multinom(class ~ predicted + defendersInTheBox + numDL + numLB + numDB + defRank + isBlitz + totalSacksGame + totalIntGame + avgPassRushers + totalPassBlitzGame + safety_depth + avg_corner_depth+ chulls+ chulls_ratio, data = vars)
#Log odds scale
#My interpretation of logisitc regression coefficients is rusty
summary(mod_4)
#Get z score
z <- summary(mod_4)$coefficients/summary(mod_4)$standard.errors
z
#Get p value
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
#Exponentiate coefficients
exp(coef(mod_4))
#Look at original class distributions
prop.table(table(vars$class))
#Evaluate the model
# Predicting the values for train dataset
train_vars <- vars %>%
select(predicted, defendersInTheBox, numDL, numLB, numDB, defRank, isBlitz, totalSacksGame, totalIntGame, avgPassRushers, totalPassBlitzGame, safety_depth, avg_corner_depth, chulls, chulls_ratio)
train_vars$predicted_class <- predict(mod_4, newdata = train_vars, "class")
train_vars$real <- vars$class
# Building classification table
ctable <- table(train_vars$real, train_vars$predicted_class)
ctable
# Calculating accuracy - sum of diagonal elements divided by total obs
round((sum(diag(ctable))/sum(ctable))*100,2)
prop.table(table(train_vars$predicted_class))
prop.table(table(train_vars$real))
prop.model <- final.data
data <- final.data
library(tidyverse)
# Get the final dataset
# Found in "propensity scores" folder in github
final.data <- read.csv("FinalDataset_ratings copy 2.csv")
# Get the final dataset
# Found in "propensity scores" folder in github
final.data <- read.csv("FinalDataset_ratings copy 2.csv")
